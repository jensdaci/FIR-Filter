/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2020  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname "imem_mc" -words 256 -bits 16 -frequency 1 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met3 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -corners ff_1p32v_m55c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   aci
 *      Instance Name:  imem_mc
 *      Words:          256
 *      Word Width:     16
 *      Mux:            2
 *      Process:        ff_1p32v_m55c
 *
 *      Creation Date:  2020-11-20 21:18:50Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Primetime
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.
 *          Different modes are defined in order to disable false path
 *          during the specific mode activation when doing static timing analysis. 
 *
 *
 *      Modeling Limitations: This stamp does not include power information.
 *          Due to limitations of the stamp modeling, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

MODELDATA
OPERATING_CONDITION "ff_1p32v_m55c";
DESIGN              "imem_mc";

CELLDATA
area                   : 27891.321;
default_max_transition : 1.500;
ENDCELLDATA

PORTDATA
Q[15:0] : MAXCAP(0.650);
A[7:0] : CAP(0.012);
D[15:0] : CAP(0.003);
CLK : CAP(0.054), MAXTRANS(1.500);
WEN : CAP(0.017);
CEN : CAP(0.006);
ENDPORTDATA

TIMINGDATA
GLOBAL
        lu_table_template(imem_mc_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(imem_mc_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(imem_mc_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_mc_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_mc_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_mc_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_mc_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
ENDGLOBAL
ARCDATA
setup_a_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.325, 0.357, 0.396, 0.476, 0.713, 1.109, 1.505", \
                          "0.297, 0.328, 0.368, 0.447, 0.685, 1.081, 1.477", \
                          "0.261, 0.292, 0.332, 0.411, 0.649, 1.045, 1.441", \
                          "0.189, 0.221, 0.260, 0.340, 0.577, 0.973, 1.369", \
                          "-0.026, 0.006, 0.045, 0.125, 0.362, 0.758, 1.154", \
                          "-0.384, -0.353, -0.313, -0.234, 0.004, 0.400, 0.796", \
                          "-0.743, -0.711, -0.671, -0.592, -0.355, 0.041, 0.438" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.116, 0.145, 0.182, 0.255, 0.474, 0.840, 1.206", \
                          "0.087, 0.117, 0.153, 0.226, 0.446, 0.811, 1.177", \
                          "0.052, 0.081, 0.117, 0.191, 0.410, 0.776, 1.141", \
                          "-0.020, 0.009, 0.046, 0.119, 0.338, 0.704, 1.070", \
                          "-0.235, -0.206, -0.169, -0.096, 0.123, 0.489, 0.855", \
                          "-0.593, -0.564, -0.528, -0.454, -0.235, 0.131, 0.496", \
                          "-0.952, -0.923, -0.886, -0.813, -0.593, -0.228, 0.138" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_a_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.021, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.056, 0.025, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.128, 0.096, 0.057, 0.000, 0.000, 0.000, 0.000", \
                          "0.343, 0.311, 0.272, 0.193, 0.000, 0.000, 0.000", \
                          "0.701, 0.670, 0.630, 0.551, 0.313, 0.000, 0.000", \
                          "1.060, 1.028, 0.989, 0.909, 0.672, 0.276, 0.000" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.006, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.035, 0.005, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.070, 0.041, 0.005, 0.000, 0.000, 0.000, 0.000", \
                          "0.142, 0.113, 0.076, 0.003, 0.000, 0.000, 0.000", \
                          "0.357, 0.328, 0.291, 0.218, 0.000, 0.000, 0.000", \
                          "0.716, 0.686, 0.650, 0.577, 0.357, 0.000, 0.000", \
                          "1.074, 1.045, 1.008, 0.935, 0.716, 0.350, 0.000" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_d_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.072, 0.098, 0.130, 0.194, 0.387, 0.707, 1.028", \
                          "0.044, 0.069, 0.101, 0.166, 0.358, 0.679, 0.999", \
                          "0.008, 0.034, 0.066, 0.130, 0.322, 0.643, 0.963", \
                          "-0.064, -0.038, -0.006, 0.058, 0.250, 0.571, 0.892", \
                          "-0.279, -0.253, -0.221, -0.157, 0.035, 0.356, 0.677", \
                          "-0.637, -0.611, -0.579, -0.515, -0.323, -0.002, 0.318", \
                          "-0.995, -0.970, -0.938, -0.874, -0.681, -0.361, -0.040" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.128, 0.153, 0.184, 0.246, 0.433, 0.744, 1.055", \
                          "0.099, 0.124, 0.155, 0.217, 0.404, 0.715, 1.026", \
                          "0.063, 0.088, 0.119, 0.181, 0.368, 0.679, 0.990", \
                          "-0.008, 0.016, 0.048, 0.110, 0.296, 0.607, 0.919", \
                          "-0.223, -0.199, -0.167, -0.105, 0.081, 0.392, 0.704", \
                          "-0.582, -0.557, -0.526, -0.464, -0.277, 0.034, 0.345", \
                          "-0.940, -0.915, -0.884, -0.822, -0.635, -0.324, -0.013" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_d_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.088, 0.063, 0.031, 0.000, 0.000, 0.000, 0.000", \
                          "0.117, 0.091, 0.059, 0.000, 0.000, 0.000, 0.000", \
                          "0.153, 0.127, 0.095, 0.031, 0.000, 0.000, 0.000", \
                          "0.225, 0.199, 0.167, 0.103, 0.000, 0.000, 0.000", \
                          "0.440, 0.414, 0.382, 0.318, 0.125, 0.000, 0.000", \
                          "0.798, 0.772, 0.740, 0.676, 0.484, 0.163, 0.000", \
                          "1.156, 1.131, 1.099, 1.034, 0.842, 0.521, 0.201" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.022, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.094, 0.069, 0.038, 0.000, 0.000, 0.000, 0.000", \
                          "0.309, 0.284, 0.253, 0.190, 0.004, 0.000, 0.000", \
                          "0.667, 0.642, 0.611, 0.549, 0.362, 0.051, 0.000", \
                          "1.025, 1.000, 0.969, 0.907, 0.720, 0.409, 0.098" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_cen_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.198, 0.221, 0.250, 0.308, 0.480, 0.768, 1.055", \
                          "0.170, 0.193, 0.221, 0.279, 0.451, 0.739, 1.027", \
                          "0.134, 0.157, 0.186, 0.243, 0.416, 0.703, 0.991", \
                          "0.062, 0.085, 0.114, 0.171, 0.344, 0.632, 0.919", \
                          "-0.153, -0.130, -0.101, -0.044, 0.129, 0.416, 0.704", \
                          "-0.511, -0.488, -0.460, -0.402, -0.229, 0.058, 0.346", \
                          "-0.870, -0.847, -0.818, -0.760, -0.588, -0.300, -0.013" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.222, 0.248, 0.279, 0.343, 0.534, 0.852, 1.170", \
                          "0.193, 0.219, 0.251, 0.314, 0.505, 0.823, 1.142", \
                          "0.158, 0.183, 0.215, 0.278, 0.469, 0.788, 1.106", \
                          "0.086, 0.111, 0.143, 0.207, 0.398, 0.716, 1.034", \
                          "-0.129, -0.104, -0.072, -0.008, 0.183, 0.501, 0.819", \
                          "-0.487, -0.462, -0.430, -0.367, -0.176, 0.143, 0.461", \
                          "-0.846, -0.820, -0.789, -0.725, -0.534, -0.216, 0.102" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_cen_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.212, 0.188, 0.160, 0.102, 0.000, 0.000, 0.000", \
                          "0.570, 0.547, 0.518, 0.461, 0.288, 0.000, 0.000", \
                          "0.928, 0.905, 0.876, 0.819, 0.646, 0.359, 0.071" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.014, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.229, 0.204, 0.172, 0.108, 0.000, 0.000, 0.000", \
                          "0.588, 0.562, 0.530, 0.467, 0.276, 0.000, 0.000", \
                          "0.946, 0.921, 0.889, 0.825, 0.634, 0.316, 0.000" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_wen_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.188, 0.216, 0.252, 0.322, 0.534, 0.886, 1.239", \
                          "0.160, 0.188, 0.223, 0.294, 0.505, 0.858, 1.210", \
                          "0.124, 0.152, 0.187, 0.258, 0.469, 0.822, 1.174", \
                          "0.052, 0.080, 0.116, 0.186, 0.398, 0.750, 1.103", \
                          "-0.163, -0.135, -0.100, -0.029, 0.183, 0.535, 0.888", \
                          "-0.521, -0.493, -0.458, -0.387, -0.176, 0.177, 0.529", \
                          "-0.880, -0.851, -0.816, -0.746, -0.534, -0.182, 0.171" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.243, 0.266, 0.295, 0.353, 0.527, 0.817, 1.107", \
                          "0.214, 0.238, 0.267, 0.325, 0.499, 0.789, 1.078", \
                          "0.179, 0.202, 0.231, 0.289, 0.463, 0.753, 1.043", \
                          "0.107, 0.130, 0.159, 0.217, 0.391, 0.681, 0.971", \
                          "-0.108, -0.085, -0.056, 0.002, 0.176, 0.466, 0.756", \
                          "-0.466, -0.443, -0.414, -0.356, -0.182, 0.108, 0.398", \
                          "-0.825, -0.802, -0.773, -0.715, -0.541, -0.251, 0.039" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_wen_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.010, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.046, 0.018, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.118, 0.090, 0.054, 0.000, 0.000, 0.000, 0.000", \
                          "0.333, 0.305, 0.269, 0.199, 0.000, 0.000, 0.000", \
                          "0.691, 0.663, 0.628, 0.557, 0.346, 0.000, 0.000", \
                          "1.050, 1.021, 0.986, 0.916, 0.704, 0.352, 0.000" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.027, 0.004, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.099, 0.075, 0.046, 0.000, 0.000, 0.000, 0.000", \
                          "0.314, 0.290, 0.261, 0.203, 0.030, 0.000, 0.000", \
                          "0.672, 0.649, 0.620, 0.562, 0.388, 0.098, 0.000", \
                          "1.030, 1.007, 0.978, 0.920, 0.746, 0.456, 0.166" \
                        )
                        }
ENDARCDATA


ARCDATA
period_clk_0_A:
                        rise_constraint(scalar) {
                                values ("1.583")
                        }
                        fall_constraint(scalar) {
                                values ("1.583")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_h_0_A:
                        rise_constraint(scalar) {
                                values ("0.175")
                        }
                        fall_constraint(scalar) {
                                values ("0.175")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_l_0_A:
                        rise_constraint(scalar) {
                                values ("0.204")
                        }
                        fall_constraint(scalar) {
                                values ("0.204")
                        }
ENDARCDATA
ARCDATA
dly_clk_q_0_A:
                        cell_rise(imem_mc_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "0.742, 0.753, 0.764, 0.790, 0.859, 0.971, 1.088", \
                          "0.771, 0.782, 0.792, 0.819, 0.888, 0.999, 1.116", \
                          "0.807, 0.817, 0.828, 0.855, 0.924, 1.035, 1.152", \
                          "0.879, 0.889, 0.900, 0.926, 0.995, 1.107, 1.224", \
                          "1.094, 1.104, 1.115, 1.141, 1.210, 1.322, 1.439", \
                          "1.452, 1.463, 1.473, 1.500, 1.569, 1.680, 1.797", \
                          "1.810, 1.821, 1.832, 1.858, 1.927, 2.039, 2.156" \
                        )
                        }
                        rise_transition(imem_mc_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.021, 0.048, 0.074, 0.140, 0.311, 0.588, 0.878")
                        }
                        cell_fall(imem_mc_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "0.742, 0.753, 0.764, 0.790, 0.859, 0.971, 1.088", \
                          "0.771, 0.782, 0.792, 0.819, 0.888, 0.999, 1.116", \
                          "0.807, 0.817, 0.828, 0.855, 0.924, 1.035, 1.152", \
                          "0.879, 0.889, 0.900, 0.926, 0.995, 1.107, 1.224", \
                          "1.094, 1.104, 1.115, 1.141, 1.210, 1.322, 1.439", \
                          "1.452, 1.463, 1.473, 1.500, 1.569, 1.680, 1.797", \
                          "1.810, 1.821, 1.832, 1.858, 1.927, 2.039, 2.156" \
                        )
                        }
                        fall_transition(imem_mc_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.023, 0.053, 0.082, 0.155, 0.345, 0.651, 0.972")
                        }
ENDARCDATA
ENDTIMINGDATA
ENDMODELDATA

/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2020  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname "imem_mc" -words 256 -bits 16 -frequency 1 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met3 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -corners ff_1p32v_m55c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   aci
 *      Instance Name:  imem_mc
 *      Words:          256
 *      Word Width:     16
 *      Mux:            2
 *      Process:        ss_1p08v_m55c
 *
 *      Creation Date:  2020-11-20 21:18:50Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Primetime
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.
 *          Different modes are defined in order to disable false path
 *          during the specific mode activation when doing static timing analysis. 
 *
 *
 *      Modeling Limitations: This stamp does not include power information.
 *          Due to limitations of the stamp modeling, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

MODELDATA
OPERATING_CONDITION "ss_1p08v_m55c";
DESIGN              "imem_mc";

CELLDATA
area                   : 27891.321;
default_max_transition : 1.500;
ENDCELLDATA

PORTDATA
Q[15:0] : MAXCAP(0.650);
A[7:0] : CAP(0.013);
D[15:0] : CAP(0.003);
CLK : CAP(0.058), MAXTRANS(1.500);
WEN : CAP(0.018);
CEN : CAP(0.008);
ENDPORTDATA

TIMINGDATA
GLOBAL
        lu_table_template(imem_mc_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(imem_mc_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(imem_mc_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_mc_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_mc_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_mc_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_mc_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
ENDGLOBAL
ARCDATA
setup_a_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "2.398, 2.437, 2.487, 2.586, 2.882, 3.376, 3.871", \
                          "2.360, 2.400, 2.449, 2.548, 2.845, 3.339, 3.833", \
                          "2.313, 2.353, 2.402, 2.501, 2.798, 3.292, 3.786", \
                          "2.219, 2.259, 2.308, 2.407, 2.704, 3.198, 3.692", \
                          "1.937, 1.977, 2.026, 2.125, 2.422, 2.916, 3.410", \
                          "1.468, 1.507, 1.557, 1.656, 1.952, 2.446, 2.941", \
                          "0.998, 1.038, 1.087, 1.186, 1.482, 1.977, 2.471" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.999, 1.037, 1.085, 1.180, 1.467, 1.945, 2.422", \
                          "0.961, 1.000, 1.047, 1.143, 1.429, 1.907, 2.385", \
                          "0.914, 0.953, 1.000, 1.096, 1.382, 1.860, 2.338", \
                          "0.820, 0.859, 0.906, 1.002, 1.288, 1.766, 2.244", \
                          "0.539, 0.577, 0.625, 0.720, 1.007, 1.484, 1.962", \
                          "0.069, 0.107, 0.155, 0.250, 0.537, 1.015, 1.492", \
                          "-0.401, -0.363, -0.315, -0.219, 0.067, 0.545, 1.022" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_a_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.041, 0.002, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.135, 0.096, 0.046, 0.000, 0.000, 0.000, 0.000", \
                          "0.417, 0.378, 0.328, 0.229, 0.000, 0.000, 0.000", \
                          "0.887, 0.847, 0.798, 0.699, 0.402, 0.000, 0.000", \
                          "1.356, 1.317, 1.267, 1.169, 0.872, 0.378, 0.000" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.061, 0.023, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.099, 0.061, 0.013, 0.000, 0.000, 0.000, 0.000", \
                          "0.146, 0.108, 0.060, 0.000, 0.000, 0.000, 0.000", \
                          "0.240, 0.201, 0.154, 0.058, 0.000, 0.000, 0.000", \
                          "0.521, 0.483, 0.435, 0.340, 0.053, 0.000, 0.000", \
                          "0.991, 0.953, 0.905, 0.810, 0.523, 0.046, 0.000", \
                          "1.461, 1.423, 1.375, 1.279, 0.993, 0.515, 0.038" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_d_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.143, 1.182, 1.232, 1.330, 1.626, 2.118, 2.611", \
                          "1.105, 1.145, 1.194, 1.293, 1.588, 2.081, 2.573", \
                          "1.058, 1.098, 1.147, 1.246, 1.541, 2.034, 2.526", \
                          "0.964, 1.004, 1.053, 1.152, 1.447, 1.940, 2.432", \
                          "0.683, 0.722, 0.771, 0.870, 1.165, 1.658, 2.150", \
                          "0.213, 0.252, 0.302, 0.400, 0.696, 1.188, 1.681", \
                          "-0.257, -0.217, -0.168, -0.070, 0.226, 0.718, 1.211" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.251, 1.289, 1.337, 1.433, 1.722, 2.203, 2.683", \
                          "1.213, 1.252, 1.300, 1.396, 1.684, 2.165, 2.646", \
                          "1.166, 1.205, 1.253, 1.349, 1.637, 2.118, 2.599", \
                          "1.072, 1.111, 1.159, 1.255, 1.543, 2.024, 2.505", \
                          "0.790, 0.829, 0.877, 0.973, 1.262, 1.742, 2.223", \
                          "0.321, 0.359, 0.407, 0.503, 0.792, 1.273, 1.753", \
                          "-0.149, -0.110, -0.062, 0.034, 0.322, 0.803, 1.284" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_d_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.156, 0.116, 0.067, 0.000, 0.000, 0.000, 0.000", \
                          "0.626, 0.586, 0.537, 0.438, 0.143, 0.000, 0.000", \
                          "1.095, 1.056, 1.007, 0.908, 0.613, 0.120, 0.000" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.396, 0.358, 0.310, 0.214, 0.000, 0.000, 0.000", \
                          "0.866, 0.828, 0.780, 0.683, 0.395, 0.000, 0.000" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_cen_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.238, 1.277, 1.325, 1.421, 1.710, 2.192, 2.674", \
                          "1.200, 1.239, 1.287, 1.384, 1.673, 2.155, 2.637", \
                          "1.153, 1.192, 1.240, 1.337, 1.626, 2.108, 2.590", \
                          "1.060, 1.098, 1.146, 1.243, 1.532, 2.014, 2.496", \
                          "0.778, 0.816, 0.864, 0.961, 1.250, 1.732, 2.214", \
                          "0.308, 0.347, 0.395, 0.491, 0.780, 1.262, 1.744", \
                          "-0.162, -0.123, -0.075, 0.021, 0.311, 0.793, 1.274" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.872, 1.911, 1.960, 2.057, 2.348, 2.834, 3.320", \
                          "1.835, 1.873, 1.922, 2.019, 2.311, 2.797, 3.283", \
                          "1.788, 1.826, 1.875, 1.972, 2.264, 2.750, 3.236", \
                          "1.694, 1.732, 1.781, 1.878, 2.170, 2.656, 3.142", \
                          "1.412, 1.451, 1.499, 1.596, 1.888, 2.374, 2.860", \
                          "0.942, 0.981, 1.030, 1.127, 1.418, 1.904, 2.390", \
                          "0.472, 0.511, 0.560, 0.657, 0.949, 1.435, 1.920" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_cen_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.337, 0.299, 0.251, 0.154, 0.000, 0.000, 0.000" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.350, 0.311, 0.263, 0.166, 0.000, 0.000, 0.000" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_wen_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.413, 1.452, 1.501, 1.599, 1.894, 2.385, 2.876", \
                          "1.375, 1.414, 1.464, 1.562, 1.856, 2.348, 2.839", \
                          "1.328, 1.367, 1.417, 1.515, 1.810, 2.301, 2.792", \
                          "1.234, 1.273, 1.323, 1.421, 1.716, 2.207, 2.698", \
                          "0.952, 0.992, 1.041, 1.139, 1.434, 1.925, 2.416", \
                          "0.483, 0.522, 0.571, 0.669, 0.964, 1.455, 1.946", \
                          "0.013, 0.052, 0.101, 0.200, 0.494, 0.986, 1.477" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.483, 1.520, 1.565, 1.655, 1.926, 2.378, 2.830", \
                          "1.446, 1.482, 1.527, 1.617, 1.889, 2.340, 2.792", \
                          "1.399, 1.435, 1.480, 1.571, 1.842, 2.294, 2.745", \
                          "1.305, 1.341, 1.386, 1.477, 1.748, 2.200, 2.651", \
                          "1.023, 1.059, 1.104, 1.195, 1.466, 1.918, 2.370", \
                          "0.553, 0.590, 0.635, 0.725, 0.996, 1.448, 1.900", \
                          "0.084, 0.120, 0.165, 0.255, 0.527, 0.978, 1.430" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_wen_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.009, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.291, 0.252, 0.203, 0.105, 0.000, 0.000, 0.000", \
                          "0.761, 0.722, 0.672, 0.574, 0.280, 0.000, 0.000", \
                          "1.231, 1.191, 1.142, 1.044, 0.749, 0.258, 0.000" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.156, 0.120, 0.075, 0.000, 0.000, 0.000, 0.000", \
                          "0.626, 0.590, 0.545, 0.454, 0.183, 0.000, 0.000", \
                          "1.096, 1.060, 1.014, 0.924, 0.653, 0.201, 0.000" \
                        )
                        }
ENDARCDATA


ARCDATA
period_clk_0_A:
                        rise_constraint(scalar) {
                                values ("9.679")
                        }
                        fall_constraint(scalar) {
                                values ("9.679")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_h_0_A:
                        rise_constraint(scalar) {
                                values ("0.712")
                        }
                        fall_constraint(scalar) {
                                values ("0.712")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_l_0_A:
                        rise_constraint(scalar) {
                                values ("1.654")
                        }
                        fall_constraint(scalar) {
                                values ("1.654")
                        }
ENDARCDATA
ARCDATA
dly_clk_q_0_A:
                        cell_rise(imem_mc_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "7.678, 7.727, 7.777, 7.901, 8.222, 8.742, 9.286", \
                          "7.716, 7.765, 7.814, 7.938, 8.260, 8.779, 9.323", \
                          "7.762, 7.812, 7.861, 7.985, 8.307, 8.826, 9.370", \
                          "7.856, 7.906, 7.955, 8.079, 8.401, 8.920, 9.464", \
                          "8.138, 8.188, 8.237, 8.361, 8.682, 9.202, 9.746", \
                          "8.608, 8.657, 8.707, 8.831, 9.152, 9.671, 10.216", \
                          "9.078, 9.127, 9.177, 9.300, 9.622, 10.141, 10.685" \
                        )
                        }
                        rise_transition(imem_mc_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.127, 0.237, 0.348, 0.625, 1.345, 2.507, 3.725")
                        }
                        cell_fall(imem_mc_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "7.902, 7.968, 8.035, 8.201, 8.634, 9.334, 10.067", \
                          "7.939, 8.006, 8.072, 8.239, 8.672, 9.372, 10.104", \
                          "7.986, 8.053, 8.119, 8.286, 8.719, 9.419, 10.151", \
                          "8.080, 8.147, 8.213, 8.380, 8.813, 9.512, 10.245", \
                          "8.362, 8.428, 8.495, 8.662, 9.095, 9.794, 10.527", \
                          "8.831, 8.898, 8.965, 9.131, 9.564, 10.264, 10.997", \
                          "9.301, 9.368, 9.434, 9.601, 10.034, 10.734, 11.467" \
                        )
                        }
                        fall_transition(imem_mc_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.140, 0.295, 0.451, 0.840, 1.850, 3.482, 5.193")
                        }
ENDARCDATA
ENDTIMINGDATA
ENDMODELDATA

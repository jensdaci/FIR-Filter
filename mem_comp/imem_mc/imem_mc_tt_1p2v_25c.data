/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2020  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname "imem_mc" -words 256 -bits 16 -frequency 1 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met3 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -corners ff_1p32v_m55c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   aci
 *      Instance Name:  imem_mc
 *      Words:          256
 *      Word Width:     16
 *      Mux:            2
 *      Process:        tt_1p2v_25c
 *
 *      Creation Date:  2020-11-20 21:18:50Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Primetime
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.
 *          Different modes are defined in order to disable false path
 *          during the specific mode activation when doing static timing analysis. 
 *
 *
 *      Modeling Limitations: This stamp does not include power information.
 *          Due to limitations of the stamp modeling, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

MODELDATA
OPERATING_CONDITION "tt_1p2v_25c";
DESIGN              "imem_mc";

CELLDATA
area                   : 27891.321;
default_max_transition : 1.500;
ENDCELLDATA

PORTDATA
Q[15:0] : MAXCAP(0.650);
A[7:0] : CAP(0.013);
D[15:0] : CAP(0.003);
CLK : CAP(0.057), MAXTRANS(1.500);
WEN : CAP(0.018);
CEN : CAP(0.008);
ENDPORTDATA

TIMINGDATA
GLOBAL
        lu_table_template(imem_mc_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(imem_mc_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(imem_mc_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_mc_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_mc_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_mc_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(imem_mc_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
ENDGLOBAL
ARCDATA
setup_a_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.811, 0.846, 0.890, 0.978, 1.241, 1.681, 2.120", \
                          "0.779, 0.814, 0.858, 0.946, 1.209, 1.649, 2.088", \
                          "0.739, 0.774, 0.818, 0.906, 1.169, 1.609, 2.048", \
                          "0.658, 0.693, 0.737, 0.825, 1.089, 1.528, 1.968", \
                          "0.417, 0.453, 0.496, 0.584, 0.848, 1.287, 1.727", \
                          "0.016, 0.051, 0.095, 0.183, 0.447, 0.886, 1.325", \
                          "-0.386, -0.350, -0.306, -0.219, 0.045, 0.484, 0.924" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.337, 0.370, 0.410, 0.492, 0.737, 1.145, 1.552", \
                          "0.305, 0.338, 0.378, 0.460, 0.705, 1.112, 1.520", \
                          "0.265, 0.297, 0.338, 0.420, 0.664, 1.072, 1.480", \
                          "0.185, 0.217, 0.258, 0.339, 0.584, 0.992, 1.400", \
                          "-0.056, -0.024, 0.017, 0.099, 0.343, 0.751, 1.159", \
                          "-0.458, -0.425, -0.384, -0.303, -0.058, 0.350, 0.757", \
                          "-0.859, -0.827, -0.786, -0.704, -0.460, -0.052, 0.356" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_a_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.027, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.067, 0.032, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.147, 0.112, 0.068, 0.000, 0.000, 0.000, 0.000", \
                          "0.388, 0.353, 0.309, 0.221, 0.000, 0.000, 0.000", \
                          "0.789, 0.754, 0.710, 0.622, 0.359, 0.000, 0.000", \
                          "1.191, 1.156, 1.112, 1.024, 0.760, 0.321, 0.000" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.028, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.060, 0.027, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.100, 0.067, 0.027, 0.000, 0.000, 0.000, 0.000", \
                          "0.180, 0.148, 0.107, 0.025, 0.000, 0.000, 0.000", \
                          "0.421, 0.389, 0.348, 0.266, 0.022, 0.000, 0.000", \
                          "0.823, 0.790, 0.749, 0.668, 0.423, 0.015, 0.000", \
                          "1.224, 1.191, 1.151, 1.069, 0.824, 0.417, 0.009" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_d_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.233, 0.266, 0.308, 0.391, 0.640, 1.055, 1.470", \
                          "0.201, 0.234, 0.276, 0.359, 0.608, 1.023, 1.438", \
                          "0.161, 0.194, 0.235, 0.318, 0.568, 0.983, 1.398", \
                          "0.080, 0.114, 0.155, 0.238, 0.487, 0.903, 1.318", \
                          "-0.160, -0.127, -0.086, -0.003, 0.246, 0.662, 1.077", \
                          "-0.562, -0.529, -0.487, -0.404, -0.155, 0.260, 0.675", \
                          "-0.963, -0.930, -0.889, -0.806, -0.556, -0.141, 0.274" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.359, 0.392, 0.432, 0.514, 0.758, 1.164, 1.571", \
                          "0.327, 0.360, 0.400, 0.482, 0.726, 1.132, 1.539", \
                          "0.287, 0.319, 0.360, 0.441, 0.685, 1.092, 1.499", \
                          "0.207, 0.239, 0.280, 0.361, 0.605, 1.012, 1.418", \
                          "-0.034, -0.002, 0.039, 0.120, 0.364, 0.771, 1.178", \
                          "-0.436, -0.403, -0.363, -0.281, -0.037, 0.369, 0.776", \
                          "-0.837, -0.805, -0.764, -0.683, -0.439, -0.032, 0.375" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_d_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.012, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.045, 0.011, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.085, 0.051, 0.010, 0.000, 0.000, 0.000, 0.000", \
                          "0.165, 0.132, 0.090, 0.007, 0.000, 0.000, 0.000", \
                          "0.406, 0.373, 0.331, 0.248, 0.000, 0.000, 0.000", \
                          "0.807, 0.774, 0.733, 0.650, 0.400, 0.000, 0.000", \
                          "1.209, 1.176, 1.134, 1.051, 0.802, 0.387, 0.000" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.236, 0.203, 0.163, 0.081, 0.000, 0.000, 0.000", \
                          "0.637, 0.605, 0.564, 0.483, 0.239, 0.000, 0.000", \
                          "1.039, 1.006, 0.966, 0.884, 0.640, 0.234, 0.000" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_cen_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.560, 0.590, 0.629, 0.706, 0.936, 1.321, 1.705", \
                          "0.528, 0.558, 0.597, 0.674, 0.904, 1.289, 1.673", \
                          "0.487, 0.518, 0.557, 0.634, 0.864, 1.248, 1.633", \
                          "0.407, 0.438, 0.476, 0.553, 0.784, 1.168, 1.553", \
                          "0.166, 0.197, 0.235, 0.312, 0.543, 0.927, 1.312", \
                          "-0.235, -0.204, -0.166, -0.089, 0.142, 0.526, 0.910", \
                          "-0.637, -0.606, -0.567, -0.491, -0.260, 0.124, 0.509" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.642, 0.675, 0.717, 0.799, 1.048, 1.461, 1.875", \
                          "0.610, 0.643, 0.685, 0.767, 1.015, 1.429, 1.842", \
                          "0.570, 0.603, 0.645, 0.727, 0.975, 1.389, 1.802", \
                          "0.490, 0.523, 0.564, 0.647, 0.895, 1.309, 1.722", \
                          "0.249, 0.282, 0.323, 0.406, 0.654, 1.068, 1.481", \
                          "-0.153, -0.119, -0.078, 0.005, 0.253, 0.666, 1.080", \
                          "-0.554, -0.521, -0.480, -0.397, -0.149, 0.265, 0.678" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_cen_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.058, 0.028, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.460, 0.429, 0.391, 0.314, 0.083, 0.000, 0.000", \
                          "0.861, 0.830, 0.792, 0.715, 0.485, 0.100, 0.000" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.370, 0.337, 0.295, 0.213, 0.000, 0.000, 0.000", \
                          "0.771, 0.738, 0.697, 0.614, 0.366, 0.000, 0.000" \
                        )
                        }
ENDARCDATA
ARCDATA
setup_wen_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.400, 0.432, 0.473, 0.555, 0.799, 1.207, 1.615", \
                          "0.368, 0.400, 0.441, 0.523, 0.767, 1.175, 1.583", \
                          "0.327, 0.360, 0.401, 0.482, 0.727, 1.135, 1.543", \
                          "0.247, 0.280, 0.321, 0.402, 0.647, 1.055, 1.462", \
                          "0.006, 0.039, 0.080, 0.161, 0.406, 0.814, 1.222", \
                          "-0.395, -0.363, -0.322, -0.240, 0.004, 0.412, 0.820", \
                          "-0.797, -0.764, -0.723, -0.642, -0.397, 0.011, 0.419" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.518, 0.546, 0.581, 0.651, 0.861, 1.210, 1.560", \
                          "0.486, 0.514, 0.549, 0.619, 0.828, 1.178, 1.528", \
                          "0.446, 0.474, 0.509, 0.578, 0.788, 1.138, 1.488", \
                          "0.365, 0.393, 0.428, 0.498, 0.708, 1.058, 1.408", \
                          "0.124, 0.152, 0.187, 0.257, 0.467, 0.817, 1.167", \
                          "-0.277, -0.249, -0.214, -0.144, 0.066, 0.415, 0.765", \
                          "-0.678, -0.650, -0.616, -0.546, -0.336, 0.014, 0.364" \
                        )
                        }
ENDARCDATA
ARCDATA
hold_wen_A:
                        rise_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.030, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.110, 0.077, 0.037, 0.000, 0.000, 0.000, 0.000", \
                          "0.351, 0.318, 0.278, 0.196, 0.000, 0.000, 0.000", \
                          "0.752, 0.720, 0.679, 0.597, 0.353, 0.000, 0.000", \
                          "1.154, 1.121, 1.080, 0.999, 0.754, 0.346, 0.000" \
                        )
                        }
                        fall_constraint(imem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.002, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.042, 0.014, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.122, 0.094, 0.059, 0.000, 0.000, 0.000, 0.000", \
                          "0.363, 0.335, 0.300, 0.230, 0.020, 0.000, 0.000", \
                          "0.764, 0.736, 0.701, 0.631, 0.422, 0.072, 0.000", \
                          "1.166, 1.138, 1.103, 1.033, 0.823, 0.473, 0.124" \
                        )
                        }
ENDARCDATA


ARCDATA
period_clk_0_A:
                        rise_constraint(scalar) {
                                values ("3.936")
                        }
                        fall_constraint(scalar) {
                                values ("3.936")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_h_0_A:
                        rise_constraint(scalar) {
                                values ("0.355")
                        }
                        fall_constraint(scalar) {
                                values ("0.355")
                        }
ENDARCDATA
ARCDATA
pulsewidth_clk_l_0_A:
                        rise_constraint(scalar) {
                                values ("0.585")
                        }
                        fall_constraint(scalar) {
                                values ("0.585")
                        }
ENDARCDATA
ARCDATA
dly_clk_q_0_A:
                        cell_rise(imem_mc_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "1.908, 1.930, 1.952, 2.006, 2.148, 2.377, 2.617", \
                          "1.941, 1.962, 1.984, 2.039, 2.180, 2.409, 2.649", \
                          "1.981, 2.002, 2.024, 2.079, 2.220, 2.449, 2.689", \
                          "2.061, 2.083, 2.105, 2.159, 2.301, 2.530, 2.769", \
                          "2.302, 2.324, 2.345, 2.400, 2.542, 2.770, 3.010", \
                          "2.703, 2.725, 2.747, 2.801, 2.943, 3.172, 3.412", \
                          "3.105, 3.127, 3.148, 3.203, 3.344, 3.573, 3.813" \
                        )
                        }
                        rise_transition(imem_mc_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.050, 0.102, 0.155, 0.285, 0.623, 1.170, 1.743")
                        }
                        cell_fall(imem_mc_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "1.908, 1.930, 1.952, 2.006, 2.148, 2.377, 2.617", \
                          "1.941, 1.962, 1.984, 2.039, 2.180, 2.409, 2.649", \
                          "1.981, 2.002, 2.024, 2.079, 2.220, 2.449, 2.689", \
                          "2.061, 2.083, 2.105, 2.159, 2.301, 2.530, 2.769", \
                          "2.302, 2.324, 2.345, 2.400, 2.542, 2.770, 3.010", \
                          "2.703, 2.725, 2.747, 2.801, 2.943, 3.172, 3.412", \
                          "3.105, 3.127, 3.148, 3.203, 3.344, 3.573, 3.813" \
                        )
                        }
                        fall_transition(imem_mc_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.055, 0.118, 0.181, 0.339, 0.749, 1.412, 2.107")
                        }
ENDARCDATA
ENDTIMINGDATA
ENDMODELDATA

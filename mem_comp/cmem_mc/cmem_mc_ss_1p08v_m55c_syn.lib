/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2020  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname "cmem_mc" -words 64 -bits 16 -frequency 1 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met3 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -libname USERLIB -corners ff_1p32v_m55c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   USERLIB
 *      Instance Name:  cmem_mc
 *      Words:          64
 *      Word Width:     16
 *      Mux:            2
 *      Corner:        ss_1p08v_m55c
 *
 *      Creation Date:  2020-11-20 21:21:27Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2020-11-20 21:21:27Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2020 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: -55.000;
	nom_voltage		: 1.080;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.500;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(ss_1p08v_m55c) {
		process	 : 1;
		temperature	 : -55.000;
		voltage	 : 1.080;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : ss_1p08v_m55c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(cmem_mc_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(cmem_mc_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(cmem_mc_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(cmem_mc_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(cmem_mc_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(cmem_mc_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(cmem_mc_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(cmem_mc_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(cmem_mc_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(cmem_mc_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(cmem_mc_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(cmem_mc_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (cmem_mc_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 16;
		bit_from : 15;
		bit_to : 0 ;
		downto : true ;
	}
	type (cmem_mc_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (cmem_mc_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 6;
		bit_from : 5;
		bit_to : 0 ;
		downto : true ;
	}
cell(cmem_mc) {
	area		 : 12671.386;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 6;
		word_width : 16;
	}
        bus(Q)   {
                bus_type : cmem_mc_DATA;
		direction : output;
		max_capacitance : 0.650;
                memory_read() {
			address : A;
		}
                timing() {
                        related_pin :   "CLK" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(cmem_mc_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "6.041, 6.090, 6.140, 6.264, 6.585, 7.104, 7.649", \
                          "6.078, 6.128, 6.177, 6.301, 6.623, 7.142, 7.686", \
                          "6.125, 6.175, 6.224, 6.348, 6.670, 7.189, 7.733", \
                          "6.219, 6.269, 6.318, 6.442, 6.764, 7.283, 7.827", \
                          "6.501, 6.551, 6.600, 6.724, 7.045, 7.565, 8.109", \
                          "6.971, 7.020, 7.070, 7.194, 7.515, 8.034, 8.579", \
                          "7.441, 7.490, 7.540, 7.663, 7.985, 8.504, 9.048" \
                        )
                        }
                        rise_transition(cmem_mc_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.127, 0.237, 0.348, 0.625, 1.345, 2.507, 3.725")
                        }
                        cell_fall(cmem_mc_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "6.260, 6.327, 6.393, 6.560, 6.993, 7.693, 8.425", \
                          "6.298, 6.364, 6.431, 6.597, 7.030, 7.730, 8.463", \
                          "6.345, 6.411, 6.478, 6.644, 7.077, 7.777, 8.510", \
                          "6.438, 6.505, 6.572, 6.738, 7.171, 7.871, 8.604", \
                          "6.720, 6.787, 6.854, 7.020, 7.453, 8.153, 8.886", \
                          "7.190, 7.257, 7.323, 7.490, 7.923, 8.622, 9.355", \
                          "7.660, 7.726, 7.793, 7.959, 8.393, 9.092, 9.825" \
                        )
                        }
                        fall_transition(cmem_mc_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.140, 0.295, 0.451, 0.840, 1.850, 3.482, 5.193")
                        }
                }
        }
        pin(CLK)   {
		direction : input;
		capacitance : 0.058;
                clock : true;
                max_transition : 1.500;
                min_pulse_width_high : 0.712 ;
                min_pulse_width_low  : 1.654 ;
                min_period           : 7.563 ;


                internal_power(){
                        when : "(!CEN & ! \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("8.627, 8.627")
                        }
                        fall_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CEN & \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("8.238, 8.238")
                        }
                        fall_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CEN)";
                        rise_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.044, 0.044")
                        }
                        fall_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CEN)   {
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.238, 1.277, 1.325, 1.421, 1.710, 2.192, 2.674", \
                          "1.200, 1.239, 1.287, 1.384, 1.673, 2.155, 2.637", \
                          "1.153, 1.192, 1.240, 1.337, 1.626, 2.108, 2.590", \
                          "1.060, 1.098, 1.146, 1.243, 1.532, 2.014, 2.496", \
                          "0.778, 0.816, 0.864, 0.961, 1.250, 1.732, 2.214", \
                          "0.308, 0.347, 0.395, 0.491, 0.780, 1.262, 1.744", \
                          "-0.162, -0.123, -0.075, 0.021, 0.311, 0.793, 1.274" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.872, 1.911, 1.960, 2.057, 2.348, 2.834, 3.320", \
                          "1.835, 1.873, 1.922, 2.019, 2.311, 2.797, 3.283", \
                          "1.788, 1.826, 1.875, 1.972, 2.264, 2.750, 3.236", \
                          "1.694, 1.732, 1.781, 1.878, 2.170, 2.656, 3.142", \
                          "1.412, 1.451, 1.499, 1.596, 1.888, 2.374, 2.860", \
                          "0.942, 0.981, 1.030, 1.127, 1.418, 1.904, 2.390", \
                          "0.472, 0.511, 0.560, 0.657, 0.949, 1.435, 1.920" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.337, 0.299, 0.251, 0.154, 0.000, 0.000, 0.000" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.350, 0.311, 0.263, 0.166, 0.000, 0.000, 0.000" \
                        )
                        }
               }
        }
        pin(WEN){
                direction : input;
                capacitance : 0.018;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.237, 1.276, 1.325, 1.423, 1.718, 2.209, 2.701", \
                          "1.199, 1.239, 1.288, 1.386, 1.681, 2.172, 2.663", \
                          "1.152, 1.192, 1.241, 1.339, 1.634, 2.125, 2.616", \
                          "1.058, 1.098, 1.147, 1.245, 1.540, 2.031, 2.522", \
                          "0.777, 0.816, 0.865, 0.963, 1.258, 1.749, 2.240", \
                          "0.307, 0.346, 0.395, 0.493, 0.788, 1.279, 1.771", \
                          "-0.163, -0.124, -0.074, 0.024, 0.318, 0.810, 1.301" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.573, 1.609, 1.654, 1.744, 2.015, 2.467, 2.919", \
                          "1.535, 1.571, 1.616, 1.707, 1.978, 2.430, 2.882", \
                          "1.488, 1.524, 1.569, 1.660, 1.931, 2.383, 2.835", \
                          "1.394, 1.430, 1.475, 1.566, 1.837, 2.289, 2.741", \
                          "1.112, 1.148, 1.194, 1.284, 1.555, 2.007, 2.459", \
                          "0.643, 0.679, 0.724, 0.814, 1.085, 1.537, 1.989", \
                          "0.173, 0.209, 0.254, 0.345, 0.616, 1.068, 1.520" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.161, 0.121, 0.072, 0.000, 0.000, 0.000, 0.000", \
                          "0.630, 0.591, 0.542, 0.444, 0.149, 0.000, 0.000", \
                          "1.100, 1.061, 1.011, 0.913, 0.619, 0.127, 0.000" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.009, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.291, 0.255, 0.209, 0.119, 0.000, 0.000, 0.000", \
                          "0.760, 0.724, 0.679, 0.589, 0.318, 0.000, 0.000", \
                          "1.230, 1.194, 1.149, 1.058, 0.787, 0.335, 0.000" \
                        )
                        }
               }
        }
        bus(A)   {
                bus_type : cmem_mc_ADDRESS;
                direction : input;
                capacitance : 0.013;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "2.211, 2.250, 2.300, 2.399, 2.695, 3.189, 3.684", \
                          "2.173, 2.213, 2.262, 2.361, 2.658, 3.152, 3.646", \
                          "2.126, 2.166, 2.215, 2.314, 2.611, 3.105, 3.599", \
                          "2.032, 2.072, 2.121, 2.220, 2.517, 3.011, 3.505", \
                          "1.750, 1.790, 1.839, 1.938, 2.235, 2.729, 3.223", \
                          "1.281, 1.320, 1.370, 1.469, 1.765, 2.259, 2.754", \
                          "0.811, 0.851, 0.900, 0.999, 1.295, 1.790, 2.284" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.657, 0.695, 0.743, 0.839, 1.125, 1.603, 2.080", \
                          "0.620, 0.658, 0.706, 0.801, 1.088, 1.565, 2.043", \
                          "0.573, 0.611, 0.659, 0.754, 1.041, 1.518, 1.996", \
                          "0.479, 0.517, 0.565, 0.660, 0.947, 1.424, 1.902", \
                          "0.197, 0.235, 0.283, 0.378, 0.665, 1.142, 1.620", \
                          "-0.273, -0.235, -0.187, -0.091, 0.195, 0.673, 1.150", \
                          "-0.743, -0.704, -0.657, -0.561, -0.275, 0.203, 0.681" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.002, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.096, 0.056, 0.007, 0.000, 0.000, 0.000, 0.000", \
                          "0.378, 0.338, 0.289, 0.190, 0.000, 0.000, 0.000", \
                          "0.848, 0.808, 0.759, 0.660, 0.363, 0.000, 0.000", \
                          "1.317, 1.278, 1.228, 1.129, 0.833, 0.338, 0.000" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.022, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.060, 0.021, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.107, 0.068, 0.021, 0.000, 0.000, 0.000, 0.000", \
                          "0.200, 0.162, 0.114, 0.019, 0.000, 0.000, 0.000", \
                          "0.482, 0.444, 0.396, 0.301, 0.014, 0.000, 0.000", \
                          "0.952, 0.914, 0.866, 0.770, 0.484, 0.006, 0.000", \
                          "1.422, 1.383, 1.336, 1.240, 0.954, 0.476, 0.000" \
                        )
                        }
               }
                internal_power(){
                        when : "CEN";
                        rise_power(cmem_mc_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.080, 0.080")
                        }
                        fall_power(cmem_mc_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.080, 0.080")
                        }
                }
        }
        bus(D)   {
                bus_type : cmem_mc_DATA;
                memory_write() {
                        address : A;
                        clocked_on : "CLK";
                }
                direction : input;
                capacitance : 0.003;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.967, 1.006, 1.055, 1.154, 1.449, 1.942, 2.434", \
                          "0.929, 0.968, 1.018, 1.116, 1.412, 1.904, 2.397", \
                          "0.882, 0.921, 0.971, 1.069, 1.365, 1.857, 2.350", \
                          "0.788, 0.828, 0.877, 0.975, 1.271, 1.763, 2.256", \
                          "0.506, 0.546, 0.595, 0.693, 0.989, 1.482, 1.974", \
                          "0.037, 0.076, 0.125, 0.224, 0.519, 1.012, 1.504", \
                          "-0.433, -0.394, -0.344, -0.246, 0.050, 0.542, 1.035" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "1.340, 1.378, 1.426, 1.523, 1.811, 2.292, 2.773", \
                          "1.302, 1.341, 1.389, 1.485, 1.774, 2.254, 2.735", \
                          "1.255, 1.294, 1.342, 1.438, 1.727, 2.207, 2.688", \
                          "1.161, 1.200, 1.248, 1.344, 1.633, 2.113, 2.594", \
                          "0.880, 0.918, 0.966, 1.062, 1.351, 1.832, 2.312", \
                          "0.410, 0.448, 0.496, 0.593, 0.881, 1.362, 1.843", \
                          "-0.060, -0.021, 0.027, 0.123, 0.411, 0.892, 1.373" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.117, 0.077, 0.028, 0.000, 0.000, 0.000, 0.000", \
                          "0.586, 0.547, 0.498, 0.399, 0.104, 0.000, 0.000", \
                          "1.056, 1.017, 0.967, 0.869, 0.573, 0.081, 0.000" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.357, 0.319, 0.271, 0.175, 0.000, 0.000, 0.000", \
                          "0.827, 0.788, 0.740, 0.644, 0.356, 0.000, 0.000" \
                        )
                        }
               }
        }

        cell_leakage_power : 1.78E-5;
}
}

/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2020  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname "cmem_mc" -words 64 -bits 16 -frequency 1 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met3 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -libname USERLIB -corners ff_1p32v_m55c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   USERLIB
 *      Instance Name:  cmem_mc
 *      Words:          64
 *      Word Width:     16
 *      Mux:            2
 *      Corner:        tt_1p2v_25c
 *
 *      Creation Date:  2020-11-20 21:21:27Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2020-11-20 21:21:27Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2020 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: 25.000;
	nom_voltage		: 1.200;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.500;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(tt_1p2v_25c) {
		process	 : 1;
		temperature	 : 25.000;
		voltage	 : 1.200;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : tt_1p2v_25c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(cmem_mc_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(cmem_mc_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(cmem_mc_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(cmem_mc_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(cmem_mc_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(cmem_mc_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(cmem_mc_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(cmem_mc_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(cmem_mc_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(cmem_mc_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(cmem_mc_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(cmem_mc_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (cmem_mc_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 16;
		bit_from : 15;
		bit_to : 0 ;
		downto : true ;
	}
	type (cmem_mc_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (cmem_mc_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 6;
		bit_from : 5;
		bit_to : 0 ;
		downto : true ;
	}
cell(cmem_mc) {
	area		 : 12671.386;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 6;
		word_width : 16;
	}
        bus(Q)   {
                bus_type : cmem_mc_DATA;
		direction : output;
		max_capacitance : 0.650;
                memory_read() {
			address : A;
		}
                timing() {
                        related_pin :   "CLK" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(cmem_mc_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "1.525, 1.547, 1.569, 1.623, 1.765, 1.994, 2.233", \
                          "1.557, 1.579, 1.601, 1.655, 1.797, 2.026, 2.265", \
                          "1.597, 1.619, 1.641, 1.695, 1.837, 2.066, 2.306", \
                          "1.678, 1.699, 1.721, 1.776, 1.917, 2.146, 2.386", \
                          "1.918, 1.940, 1.962, 2.017, 2.158, 2.387, 2.627", \
                          "2.320, 2.342, 2.363, 2.418, 2.560, 2.788, 3.028", \
                          "2.721, 2.743, 2.765, 2.819, 2.961, 3.190, 3.430" \
                        )
                        }
                        rise_transition(cmem_mc_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.050, 0.102, 0.155, 0.285, 0.623, 1.170, 1.743")
                        }
                        cell_fall(cmem_mc_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "1.525, 1.547, 1.569, 1.623, 1.765, 1.994, 2.233", \
                          "1.557, 1.579, 1.601, 1.655, 1.797, 2.026, 2.265", \
                          "1.597, 1.619, 1.641, 1.695, 1.837, 2.066, 2.306", \
                          "1.678, 1.699, 1.721, 1.776, 1.917, 2.146, 2.386", \
                          "1.918, 1.940, 1.962, 2.017, 2.158, 2.387, 2.627", \
                          "2.320, 2.342, 2.363, 2.418, 2.560, 2.788, 3.028", \
                          "2.721, 2.743, 2.765, 2.819, 2.961, 3.190, 3.430" \
                        )
                        }
                        fall_transition(cmem_mc_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.055, 0.118, 0.181, 0.339, 0.749, 1.412, 2.107")
                        }
                }
        }
        pin(CLK)   {
		direction : input;
		capacitance : 0.057;
                clock : true;
                max_transition : 1.500;
                min_pulse_width_high : 0.355 ;
                min_pulse_width_low  : 0.585 ;
                min_period           : 3.055 ;


                internal_power(){
                        when : "(!CEN & ! \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("10.756, 10.756")
                        }
                        fall_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CEN & \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("10.264, 10.264")
                        }
                        fall_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CEN)";
                        rise_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.053, 0.053")
                        }
                        fall_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CEN)   {
                direction : input;
                capacitance : 0.008;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.560, 0.590, 0.629, 0.706, 0.936, 1.321, 1.705", \
                          "0.528, 0.558, 0.597, 0.674, 0.904, 1.289, 1.673", \
                          "0.487, 0.518, 0.557, 0.634, 0.864, 1.248, 1.633", \
                          "0.407, 0.438, 0.476, 0.553, 0.784, 1.168, 1.553", \
                          "0.166, 0.197, 0.235, 0.312, 0.543, 0.927, 1.312", \
                          "-0.235, -0.204, -0.166, -0.089, 0.142, 0.526, 0.910", \
                          "-0.637, -0.606, -0.567, -0.491, -0.260, 0.124, 0.509" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.642, 0.675, 0.717, 0.799, 1.048, 1.461, 1.875", \
                          "0.610, 0.643, 0.685, 0.767, 1.015, 1.429, 1.842", \
                          "0.570, 0.603, 0.645, 0.727, 0.975, 1.389, 1.802", \
                          "0.490, 0.523, 0.564, 0.647, 0.895, 1.309, 1.722", \
                          "0.249, 0.282, 0.323, 0.406, 0.654, 1.068, 1.481", \
                          "-0.153, -0.119, -0.078, 0.005, 0.253, 0.666, 1.080", \
                          "-0.554, -0.521, -0.480, -0.397, -0.149, 0.265, 0.678" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.058, 0.028, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.460, 0.429, 0.391, 0.314, 0.083, 0.000, 0.000", \
                          "0.861, 0.830, 0.792, 0.715, 0.485, 0.100, 0.000" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.370, 0.337, 0.295, 0.213, 0.000, 0.000, 0.000", \
                          "0.771, 0.738, 0.697, 0.614, 0.366, 0.000, 0.000" \
                        )
                        }
               }
        }
        pin(WEN){
                direction : input;
                capacitance : 0.018;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.478, 0.511, 0.551, 0.633, 0.878, 1.286, 1.693", \
                          "0.446, 0.479, 0.519, 0.601, 0.846, 1.253, 1.661", \
                          "0.406, 0.438, 0.479, 0.561, 0.805, 1.213, 1.621", \
                          "0.326, 0.358, 0.399, 0.480, 0.725, 1.133, 1.541", \
                          "0.085, 0.117, 0.158, 0.240, 0.484, 0.892, 1.300", \
                          "-0.317, -0.284, -0.243, -0.162, 0.083, 0.491, 0.898", \
                          "-0.718, -0.686, -0.645, -0.563, -0.319, 0.089, 0.497" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.565, 0.593, 0.628, 0.698, 0.907, 1.257, 1.607", \
                          "0.533, 0.561, 0.596, 0.666, 0.875, 1.225, 1.575", \
                          "0.492, 0.520, 0.555, 0.625, 0.835, 1.185, 1.535", \
                          "0.412, 0.440, 0.475, 0.545, 0.755, 1.105, 1.454", \
                          "0.171, 0.199, 0.234, 0.304, 0.514, 0.864, 1.214", \
                          "-0.230, -0.202, -0.167, -0.097, 0.113, 0.462, 0.812", \
                          "-0.632, -0.604, -0.569, -0.499, -0.289, 0.061, 0.411" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.051, 0.018, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.291, 0.259, 0.218, 0.136, 0.000, 0.000, 0.000", \
                          "0.693, 0.660, 0.619, 0.538, 0.293, 0.000, 0.000", \
                          "1.094, 1.062, 1.021, 0.939, 0.695, 0.287, 0.000" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.026, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.267, 0.239, 0.204, 0.134, 0.000, 0.000, 0.000", \
                          "0.668, 0.641, 0.606, 0.536, 0.326, 0.000, 0.000", \
                          "1.070, 1.042, 1.007, 0.937, 0.727, 0.377, 0.028" \
                        )
                        }
               }
        }
        bus(A)   {
                bus_type : cmem_mc_ADDRESS;
                direction : input;
                capacitance : 0.013;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.742, 0.778, 0.822, 0.909, 1.173, 1.612, 2.052", \
                          "0.710, 0.746, 0.789, 0.877, 1.141, 1.580, 2.020", \
                          "0.670, 0.705, 0.749, 0.837, 1.101, 1.540, 1.980", \
                          "0.590, 0.625, 0.669, 0.757, 1.021, 1.460, 1.899", \
                          "0.349, 0.384, 0.428, 0.516, 0.780, 1.219, 1.658", \
                          "-0.052, -0.017, 0.027, 0.115, 0.378, 0.818, 1.257", \
                          "-0.454, -0.419, -0.375, -0.287, -0.023, 0.416, 0.856" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.266, 0.298, 0.339, 0.421, 0.666, 1.073, 1.481", \
                          "0.234, 0.266, 0.307, 0.389, 0.633, 1.041, 1.449", \
                          "0.194, 0.226, 0.267, 0.349, 0.593, 1.001, 1.409", \
                          "0.113, 0.146, 0.187, 0.268, 0.513, 0.921, 1.329", \
                          "-0.128, -0.095, -0.054, 0.027, 0.272, 0.680, 1.088", \
                          "-0.529, -0.496, -0.456, -0.374, -0.129, 0.278, 0.686", \
                          "-0.930, -0.898, -0.857, -0.775, -0.531, -0.123, 0.285" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.006, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.047, 0.011, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.127, 0.092, 0.048, 0.000, 0.000, 0.000, 0.000", \
                          "0.368, 0.333, 0.289, 0.201, 0.000, 0.000, 0.000", \
                          "0.769, 0.734, 0.690, 0.602, 0.339, 0.000, 0.000", \
                          "1.171, 1.135, 1.092, 1.004, 0.740, 0.301, 0.000" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.008, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.040, 0.007, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.080, 0.047, 0.007, 0.000, 0.000, 0.000, 0.000", \
                          "0.160, 0.128, 0.087, 0.005, 0.000, 0.000, 0.000", \
                          "0.401, 0.368, 0.328, 0.246, 0.001, 0.000, 0.000", \
                          "0.803, 0.770, 0.729, 0.648, 0.403, 0.000, 0.000", \
                          "1.204, 1.171, 1.131, 1.049, 0.804, 0.397, 0.000" \
                        )
                        }
               }
                internal_power(){
                        when : "CEN";
                        rise_power(cmem_mc_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.100, 0.100")
                        }
                        fall_power(cmem_mc_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.100, 0.100")
                        }
                }
        }
        bus(D)   {
                bus_type : cmem_mc_DATA;
                memory_write() {
                        address : A;
                        clocked_on : "CLK";
                }
                direction : input;
                capacitance : 0.003;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.311, 0.345, 0.386, 0.469, 0.718, 1.134, 1.549", \
                          "0.279, 0.312, 0.354, 0.437, 0.686, 1.101, 1.517", \
                          "0.239, 0.272, 0.314, 0.397, 0.646, 1.061, 1.476", \
                          "0.159, 0.192, 0.234, 0.317, 0.566, 0.981, 1.396", \
                          "-0.082, -0.049, -0.007, 0.076, 0.325, 0.740, 1.155", \
                          "-0.483, -0.450, -0.409, -0.326, -0.077, 0.339, 0.754", \
                          "-0.885, -0.852, -0.810, -0.727, -0.478, -0.063, 0.352" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.406, 0.438, 0.479, 0.560, 0.804, 1.211, 1.618", \
                          "0.374, 0.406, 0.447, 0.528, 0.772, 1.179, 1.586", \
                          "0.334, 0.366, 0.407, 0.488, 0.732, 1.139, 1.546", \
                          "0.253, 0.286, 0.327, 0.408, 0.652, 1.059, 1.465", \
                          "0.013, 0.045, 0.086, 0.167, 0.411, 0.818, 1.224", \
                          "-0.389, -0.356, -0.316, -0.234, 0.010, 0.416, 0.823", \
                          "-0.790, -0.758, -0.717, -0.636, -0.392, 0.015, 0.422" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.024, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.065, 0.031, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.145, 0.112, 0.070, 0.000, 0.000, 0.000, 0.000", \
                          "0.386, 0.352, 0.311, 0.228, 0.000, 0.000, 0.000", \
                          "0.787, 0.754, 0.712, 0.629, 0.380, 0.000, 0.000", \
                          "1.189, 1.155, 1.114, 1.031, 0.782, 0.366, 0.000" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.216, 0.183, 0.143, 0.061, 0.000, 0.000, 0.000", \
                          "0.617, 0.585, 0.544, 0.463, 0.219, 0.000, 0.000", \
                          "1.019, 0.986, 0.945, 0.864, 0.620, 0.213, 0.000" \
                        )
                        }
               }
        }

        cell_leakage_power : 3.21E-5;
}
}

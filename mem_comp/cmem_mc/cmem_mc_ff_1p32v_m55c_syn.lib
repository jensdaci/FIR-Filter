/*
 *      CONFIDENTIAL  AND  PROPRIETARY SOFTWARE OF ARM Physical IP, INC.
 *      
 *      Copyright (c) 1993-2020  ARM Physical IP, Inc.  All  Rights Reserved.
 *      
 *      Use of this Software is subject to the terms and conditions  of the
 *      applicable license agreement with ARM Physical IP, Inc.  In addition,
 *      this Software is protected by patents, copyright law and international
 *      treaties.
 *      
 *      The copyright notice(s) in this Software does not indicate actual or
 *      intended publication of this Software.
 *      
 *      name:			High Speed/Density Single Port Register File Generator
 *           			IBM CMRF8SF-LPVT Process
 *      version:		2008Q3V1
 *      comment:		
 *      configuration:	 -instname "cmem_mc" -words 64 -bits 16 -frequency 1 -ring_width 2.0 -mux 2 -write_mask off -wp_size 8 -top_layer "m6-m8_m4" -power_type rings -horiz met3 -vert met2 -cust_comment "" -bus_notation on -left_bus_delim "[" -right_bus_delim "]" -pwr_gnd_rename "VDD:VDD,GND:VSS" -prefix "" -pin_space 0.0 -name_case upper -check_instname on -diodes on -inside_ring_type GND -drive 4 -asvm on -libname USERLIB -corners ff_1p32v_m55c,ff_1p65v_125c,tt_1p2v_25c,ss_1p08v_m55c
 *
 *      Synopsys model for Synchronous Single-Port Register File
 *
 *      Library Name:   USERLIB
 *      Instance Name:  cmem_mc
 *      Words:          64
 *      Word Width:     16
 *      Mux:            2
 *      Corner:        ff_1p32v_m55c
 *
 *      Creation Date:  2020-11-20 21:21:26Z
 *      Version:        2008Q3V1
 *
 *      Verified With: Synopsys Design Compiler
 *
 *      Modeling Assumptions: This library contains a black box description
 *          for a memory element.  At the library level, a
 *          default_max_transition constraint is set to the maximum
 *          characterized input slew.  Each output has a max_capacitance
 *          constraint set to the highest characterized output load.  These two
 *          constraints force Design Compiler to synthesize circuits that
 *          operate within the characterization space.  The user can tighten
 *          these constraints, if desired.  When writing SDF from Design
 *          Compiler, use the version 2.1 option.  This ensures the SDF will
 *          annotate to simulation models provided with this generator.
 *
 *      Modeling Limitations: 
 *          Due to limitations of the .lib format, some data reduction was
 *          necessary.  When reducing data, minimum values were chosen for the
 *          fast case corner and maximum values were used for the typical and
 *          best case corners.  It is recommended that critical timing and
 *          setup and hold times be checked at all corners.
 *
 *      Known Bugs: None.
 *
 *      Known Work Arounds: N/A
 *
 */

library(USERLIB) {
	delay_model		: table_lookup;
	revision		: 1.1;	
	date			: "2020-11-20 21:21:26Z";
	comment			: "Confidential Information of ARM Physical IP, Inc.  Use subject to ARM Physical IP, Inc. license.  Copyright (c) 1993-2020 ARM Physical IP, Inc.";
	time_unit		: "1ns";
	voltage_unit		: "1V";
	current_unit		: "1mA";
	leakage_power_unit	: "1mW";
	nom_process		: 1;
	nom_temperature		: -55.000;
	nom_voltage		: 1.320;
	capacitive_load_unit	 (1,pf);

	pulling_resistance_unit	        : "1kohm";

	/* additional header data */
	default_cell_leakage_power      : 0;
	default_fanout_load		: 1;
	default_inout_pin_cap		: 0.005;
	default_input_pin_cap		: 0.005;
	default_output_pin_cap		: 0.0;
	default_max_transition		: 1.500;

        /* default attributes */
        default_leakage_power_density : 0.0;
        slew_derate_from_library      : 1.000;
        slew_lower_threshold_pct_fall : 10.000;
        slew_upper_threshold_pct_fall : 90.000;
        slew_lower_threshold_pct_rise : 10.000;
        slew_upper_threshold_pct_rise : 90.000;
        input_threshold_pct_fall      : 50.000;
        input_threshold_pct_rise      : 50.000;
        output_threshold_pct_fall     : 50.000;
        output_threshold_pct_rise     : 50.000;

 	/* k-factors */
 	k_process_cell_fall             : 1;
 	k_process_cell_leakage_power    : 0;
 	k_process_cell_rise             : 1;
 	k_process_fall_transition       : 1;
 	k_process_hold_fall             : 1;
 	k_process_hold_rise             : 1;
 	k_process_internal_power        : 0;
 	k_process_min_pulse_width_high  : 1;
 	k_process_min_pulse_width_low   : 1;
 	k_process_pin_cap               : 0;
 	k_process_recovery_fall         : 1;
 	k_process_recovery_rise         : 1;
 	k_process_rise_transition       : 1;
 	k_process_setup_fall            : 1;
 	k_process_setup_rise            : 1;
 	k_process_wire_cap              : 0;
 	k_process_wire_res              : 0;
	k_temp_cell_fall		: 0.000;
	k_temp_cell_rise		: 0.000;
	k_temp_hold_fall                : 0.000;
	k_temp_hold_rise                : 0.000;
	k_temp_min_pulse_width_high     : 0.000;
	k_temp_min_pulse_width_low      : 0.000;
	k_temp_min_period               : 0.000;
	k_temp_rise_propagation         : 0.000;
	k_temp_fall_propagation         : 0.000;
	k_temp_rise_transition          : 0.0;
	k_temp_fall_transition          : 0.0;
	k_temp_recovery_fall            : 0.000;
	k_temp_recovery_rise            : 0.000;
	k_temp_setup_fall               : 0.000;
	k_temp_setup_rise               : 0.000;
	k_volt_cell_fall                : 0.000;
	k_volt_cell_rise                : 0.000;
	k_volt_hold_fall                : 0.000;
	k_volt_hold_rise                : 0.000;
	k_volt_min_pulse_width_high     : 0.000;
	k_volt_min_pulse_width_low      : 0.000;
	k_volt_min_period               : 0.000;
	k_volt_rise_propagation         : 0.000;
	k_volt_fall_propagation         : 0.000;
	k_volt_rise_transition	        : 0.0;
	k_volt_fall_transition	        : 0.0;
	k_volt_recovery_fall            : 0.000;
	k_volt_recovery_rise            : 0.000;
	k_volt_setup_fall               : 0.000;
	k_volt_setup_rise               : 0.000;


        operating_conditions(ff_1p32v_m55c) {
		process	 : 1;
		temperature	 : -55.000;
		voltage	 : 1.320;
		tree_type	 : balanced_tree;
	}
        default_operating_conditions : ff_1p32v_m55c;
	wire_load("sample") {
		resistance	 : 1.6e-05;
		capacitance	 : 0.0002;
		area	 : 1.7;
  		slope	 : 500;
		fanout_length	 (1,500);
	}
        lu_table_template(cmem_mc_bist_mux_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(cmem_mc_mux_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        lu_table_template(cmem_mc_mem_out_delay_template) {
           variable_1 : input_net_transition;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(cmem_mc_bist_mux_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(cmem_mc_mem_out_slew_template) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(cmem_mc_clk_setup_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
	lu_table_template(cmem_mc_constraint_template) {
           variable_1 : related_pin_transition;
           variable_2 : constrained_pin_transition;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(cmem_mc_energy_template_clkslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(cmem_mc_energy_template_sigslew_load) {
           variable_1 : input_transition_time;
           variable_2 : total_output_net_capacitance;
               index_1 ("1000, 1001");
               index_2 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(cmem_mc_energy_template_load) {
           variable_1 : total_output_net_capacitance;
               index_1 ("1000, 1001, 1002, 1003, 1004, 1005, 1006");
        }
        power_lut_template(cmem_mc_energy_template_clkslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
        power_lut_template(cmem_mc_energy_template_sigslew) {
           variable_1 : input_transition_time;
               index_1 ("1000, 1001");
        }
	library_features(report_delay_calculation);
	type (cmem_mc_DATA) {
		base_type : array ;
		data_type : bit ;
		bit_width : 16;
		bit_from : 15;
		bit_to : 0 ;
		downto : true ;
	}
	type (cmem_mc_UPM) {
		base_type : array ;
		data_type : bit ;
		bit_width : 3;
		bit_from : 2;
		bit_to : 0 ;
		downto : true ;
	}
	type (cmem_mc_ADDRESS) {
		base_type : array ;
		data_type : bit ;
		bit_width : 6;
		bit_from : 5;
		bit_to : 0 ;
		downto : true ;
	}
cell(cmem_mc) {
	area		 : 12671.386;
	dont_use	 : TRUE;
	dont_touch	 : TRUE;
        interface_timing : TRUE;
	memory() {
		type : ram;
		address_width : 6;
		word_width : 16;
	}
        bus(Q)   {
                bus_type : cmem_mc_DATA;
		direction : output;
		max_capacitance : 0.650;
                memory_read() {
			address : A;
		}
                timing() {
                        related_pin :   "CLK" ;
                        timing_type : rising_edge ;
                        timing_sense : non_unate;
                        cell_rise(cmem_mc_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "0.587, 0.598, 0.608, 0.635, 0.704, 0.815, 0.932", \
                          "0.616, 0.626, 0.637, 0.663, 0.733, 0.844, 0.961", \
                          "0.652, 0.662, 0.673, 0.699, 0.768, 0.880, 0.997", \
                          "0.723, 0.734, 0.744, 0.771, 0.840, 0.952, 1.068", \
                          "0.938, 0.949, 0.959, 0.986, 1.055, 1.167, 1.283", \
                          "1.297, 1.307, 1.318, 1.344, 1.413, 1.525, 1.642", \
                          "1.655, 1.666, 1.676, 1.703, 1.772, 1.883, 2.000" \
                        )
                        }
                        rise_transition(cmem_mc_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.021, 0.048, 0.074, 0.140, 0.311, 0.588, 0.878")
                        }
                        cell_fall(cmem_mc_mem_out_delay_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ( \
                          "0.587, 0.598, 0.608, 0.635, 0.704, 0.815, 0.932", \
                          "0.616, 0.626, 0.637, 0.663, 0.733, 0.844, 0.961", \
                          "0.652, 0.662, 0.673, 0.699, 0.768, 0.880, 0.997", \
                          "0.723, 0.734, 0.744, 0.771, 0.840, 0.952, 1.068", \
                          "0.938, 0.949, 0.959, 0.986, 1.055, 1.167, 1.283", \
                          "1.297, 1.307, 1.318, 1.344, 1.413, 1.525, 1.642", \
                          "1.655, 1.666, 1.676, 1.703, 1.772, 1.883, 2.000" \
                        )
                        }
                        fall_transition(cmem_mc_mem_out_slew_template) {
                        index_1 ("0.000, 0.020, 0.040, 0.090, 0.220, 0.430, 0.650");
                        values ("0.023, 0.053, 0.082, 0.155, 0.345, 0.651, 0.972")
                        }
                }
        }
        pin(CLK)   {
		direction : input;
		capacitance : 0.054;
                clock : true;
                max_transition : 1.500;
                min_pulse_width_high : 0.175 ;
                min_pulse_width_low  : 0.204 ;
                min_period           : 1.234 ;


                internal_power(){
                        when : "(!CEN & ! \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("12.169, 12.169")
                        }
                        fall_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
                internal_power(){
                        when : "(!CEN & \
                                 (WEN) \
                                ) \
                                 ";
                        rise_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("11.579, 11.579")
                        }
                        fall_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
         internal_power(){
                 when : "(CEN)";
                        rise_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.057, 0.057")
                        }
                        fall_power(cmem_mc_energy_template_clkslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.000, 0.000")
                        }
                }
        }

        pin(CEN)   {
                direction : input;
                capacitance : 0.006;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.198, 0.221, 0.250, 0.308, 0.480, 0.768, 1.055", \
                          "0.170, 0.193, 0.221, 0.279, 0.451, 0.739, 1.027", \
                          "0.134, 0.157, 0.186, 0.243, 0.416, 0.703, 0.991", \
                          "0.062, 0.085, 0.114, 0.171, 0.344, 0.632, 0.919", \
                          "-0.153, -0.130, -0.101, -0.044, 0.129, 0.416, 0.704", \
                          "-0.511, -0.488, -0.460, -0.402, -0.229, 0.058, 0.346", \
                          "-0.870, -0.847, -0.818, -0.760, -0.588, -0.300, -0.013" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.222, 0.248, 0.279, 0.343, 0.534, 0.852, 1.170", \
                          "0.193, 0.219, 0.251, 0.314, 0.505, 0.823, 1.142", \
                          "0.158, 0.183, 0.215, 0.278, 0.469, 0.788, 1.106", \
                          "0.086, 0.111, 0.143, 0.207, 0.398, 0.716, 1.034", \
                          "-0.129, -0.104, -0.072, -0.008, 0.183, 0.501, 0.819", \
                          "-0.487, -0.462, -0.430, -0.367, -0.176, 0.143, 0.461", \
                          "-0.846, -0.820, -0.789, -0.725, -0.534, -0.216, 0.102" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.212, 0.188, 0.160, 0.102, 0.000, 0.000, 0.000", \
                          "0.570, 0.547, 0.518, 0.461, 0.288, 0.000, 0.000", \
                          "0.928, 0.905, 0.876, 0.819, 0.646, 0.359, 0.071" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.014, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.229, 0.204, 0.172, 0.108, 0.000, 0.000, 0.000", \
                          "0.588, 0.562, 0.530, 0.467, 0.276, 0.000, 0.000", \
                          "0.946, 0.921, 0.889, 0.825, 0.634, 0.316, 0.000" \
                        )
                        }
               }
        }
        pin(WEN){
                direction : input;
                capacitance : 0.017;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.214, 0.242, 0.277, 0.348, 0.559, 0.912, 1.264", \
                          "0.185, 0.213, 0.248, 0.319, 0.530, 0.883, 1.236", \
                          "0.149, 0.177, 0.213, 0.283, 0.495, 0.847, 1.200", \
                          "0.077, 0.106, 0.141, 0.211, 0.423, 0.776, 1.128", \
                          "-0.138, -0.109, -0.074, -0.004, 0.208, 0.561, 0.913", \
                          "-0.496, -0.468, -0.433, -0.362, -0.150, 0.202, 0.555", \
                          "-0.854, -0.826, -0.791, -0.720, -0.509, -0.156, 0.196" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.259, 0.282, 0.311, 0.369, 0.543, 0.833, 1.123", \
                          "0.230, 0.254, 0.283, 0.340, 0.514, 0.804, 1.094", \
                          "0.194, 0.218, 0.247, 0.305, 0.479, 0.769, 1.058", \
                          "0.123, 0.146, 0.175, 0.233, 0.407, 0.697, 0.987", \
                          "-0.092, -0.069, -0.040, 0.018, 0.192, 0.482, 0.772", \
                          "-0.451, -0.427, -0.398, -0.340, -0.166, 0.123, 0.413", \
                          "-0.809, -0.786, -0.757, -0.699, -0.525, -0.235, 0.055" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.026, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.098, 0.070, 0.034, 0.000, 0.000, 0.000, 0.000", \
                          "0.313, 0.285, 0.249, 0.179, 0.000, 0.000, 0.000", \
                          "0.671, 0.643, 0.608, 0.537, 0.326, 0.000, 0.000", \
                          "1.030, 1.001, 0.966, 0.896, 0.684, 0.331, 0.000" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.002, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.073, 0.050, 0.021, 0.000, 0.000, 0.000, 0.000", \
                          "0.288, 0.265, 0.236, 0.178, 0.004, 0.000, 0.000", \
                          "0.647, 0.624, 0.595, 0.537, 0.363, 0.073, 0.000", \
                          "1.005, 0.982, 0.953, 0.895, 0.721, 0.431, 0.141" \
                        )
                        }
               }
        }
        bus(A)   {
                bus_type : cmem_mc_ADDRESS;
                direction : input;
                capacitance : 0.012;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.281, 0.312, 0.352, 0.431, 0.669, 1.065, 1.461", \
                          "0.252, 0.284, 0.323, 0.403, 0.640, 1.036, 1.432", \
                          "0.216, 0.248, 0.288, 0.367, 0.604, 1.000, 1.397", \
                          "0.145, 0.176, 0.216, 0.295, 0.533, 0.929, 1.325", \
                          "-0.070, -0.039, 0.001, 0.080, 0.318, 0.714, 1.110", \
                          "-0.429, -0.397, -0.358, -0.278, -0.041, 0.355, 0.751", \
                          "-0.787, -0.755, -0.716, -0.637, -0.399, -0.003, 0.393" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.110, 0.139, 0.176, 0.249, 0.468, 0.834, 1.199", \
                          "0.081, 0.110, 0.147, 0.220, 0.439, 0.805, 1.171", \
                          "0.045, 0.075, 0.111, 0.184, 0.404, 0.769, 1.135", \
                          "-0.026, 0.003, 0.039, 0.113, 0.332, 0.698, 1.063", \
                          "-0.241, -0.212, -0.176, -0.102, 0.117, 0.483, 0.848", \
                          "-0.600, -0.571, -0.534, -0.461, -0.241, 0.124, 0.490", \
                          "-0.958, -0.929, -0.892, -0.819, -0.600, -0.234, 0.132" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.011, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.047, 0.016, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.119, 0.087, 0.048, 0.000, 0.000, 0.000, 0.000", \
                          "0.334, 0.302, 0.263, 0.183, 0.000, 0.000, 0.000", \
                          "0.692, 0.661, 0.621, 0.542, 0.304, 0.000, 0.000", \
                          "1.051, 1.019, 0.979, 0.900, 0.662, 0.266, 0.000" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.025, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.061, 0.032, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.133, 0.104, 0.067, 0.000, 0.000, 0.000, 0.000", \
                          "0.348, 0.319, 0.282, 0.209, 0.000, 0.000, 0.000", \
                          "0.706, 0.677, 0.640, 0.567, 0.348, 0.000, 0.000", \
                          "1.065, 1.035, 0.999, 0.926, 0.706, 0.341, 0.000" \
                        )
                        }
               }
                internal_power(){
                        when : "CEN";
                        rise_power(cmem_mc_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.114, 0.114")
                        }
                        fall_power(cmem_mc_energy_template_sigslew) {
                        index_1 ("0.000, 1.000");
                        values ("0.114, 0.114")
                        }
                }
        }
        bus(D)   {
                bus_type : cmem_mc_DATA;
                memory_write() {
                        address : A;
                        clocked_on : "CLK";
                }
                direction : input;
                capacitance : 0.003;
                timing() {
                        related_pin     : CLK;
                        timing_type     : setup_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.098, 0.123, 0.155, 0.220, 0.412, 0.733, 1.053", \
                          "0.069, 0.095, 0.127, 0.191, 0.383, 0.704, 1.025", \
                          "0.033, 0.059, 0.091, 0.155, 0.347, 0.668, 0.989", \
                          "-0.038, -0.013, 0.019, 0.083, 0.276, 0.596, 0.917", \
                          "-0.253, -0.228, -0.196, -0.132, 0.061, 0.381, 0.702", \
                          "-0.612, -0.586, -0.554, -0.490, -0.298, 0.023, 0.344", \
                          "-0.970, -0.944, -0.912, -0.848, -0.656, -0.335, -0.015" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.144, 0.168, 0.200, 0.262, 0.448, 0.759, 1.071", \
                          "0.115, 0.140, 0.171, 0.233, 0.420, 0.731, 1.042", \
                          "0.079, 0.104, 0.135, 0.197, 0.384, 0.695, 1.006", \
                          "0.007, 0.032, 0.063, 0.126, 0.312, 0.623, 0.934", \
                          "-0.208, -0.183, -0.152, -0.089, 0.097, 0.408, 0.719", \
                          "-0.566, -0.541, -0.510, -0.448, -0.261, 0.050, 0.361", \
                          "-0.924, -0.900, -0.868, -0.806, -0.620, -0.308, 0.003" \
                        )
                        }
                } 
                timing() {
                        related_pin     : CLK;
                        timing_type     : hold_rising ;
                        rise_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.079, 0.054, 0.021, 0.000, 0.000, 0.000, 0.000", \
                          "0.108, 0.082, 0.050, 0.000, 0.000, 0.000, 0.000", \
                          "0.144, 0.118, 0.086, 0.022, 0.000, 0.000, 0.000", \
                          "0.215, 0.190, 0.158, 0.094, 0.000, 0.000, 0.000", \
                          "0.430, 0.405, 0.373, 0.309, 0.116, 0.000, 0.000", \
                          "0.789, 0.763, 0.731, 0.667, 0.475, 0.154, 0.000", \
                          "1.147, 1.121, 1.089, 1.025, 0.833, 0.512, 0.192" \
                        )
                        }
                        fall_constraint(cmem_mc_constraint_template) {
                        index_1 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        index_2 ("0.010, 0.050, 0.100, 0.200, 0.500, 1.000, 1.500");
                        values ( \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.013, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000", \
                          "0.084, 0.059, 0.028, 0.000, 0.000, 0.000, 0.000", \
                          "0.299, 0.274, 0.243, 0.181, 0.000, 0.000, 0.000", \
                          "0.658, 0.633, 0.602, 0.539, 0.353, 0.042, 0.000", \
                          "1.016, 0.991, 0.960, 0.898, 0.711, 0.400, 0.089" \
                        )
                        }
               }
        }

        cell_leakage_power : 3.06E-5;
}
}
